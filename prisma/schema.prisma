
generator client {
  provider               = "prisma-client"
  output                 = "../src/generated/prisma"
  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model LineItem {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  amount      Int
  description String
  quantity    Int
  userId      String
  invoiceId   String @unique
  user User @relation(fields: [userId], references:[id]) 
  invoice Invoice @relation(fields: [invoiceId], references: [id] )
}

model Invoice {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    discount Int? @default(0)
    dueDate DateTime @default(now())
    invoiceNumber String
    invoiceStatus InvoiceStatus @default(draft)
    issueDate DateTime @default(now())
    notes String?
    subject String?
    terms String?
    userId String
    user User @relation(fields: [userId], references: [id])

    LineItem LineItem?
}

model Client {
    id String @id @default(uuid())
    clientStatus ClientStatus @default(draft)
    city String?
    email String?
    name String
    state String?
    street String?
    zip String?
    createdAt DateTime @default(now())
    userId String
    user User @relation(fields: [userId], references: [id])
}

model Settings {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    myName String
    email String
    street String
    city String
    state String
    zip String
    userId String @unique
    user User @relation(fields: [userId], references: [id])

}

model User {
  id            String    @id 
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  LineItem LineItem[]
  Invoice Invoice[]
  Client Client[]
  Settings Settings? 

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


enum ClientStatus {
  active 
  archive
  draft
}

enum InvoiceStatus {
  draft
  sent
  paid
}